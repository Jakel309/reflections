When would you want to use a remote repository rather than keeping all your work local?

  	When you are working with other people on a project or want to share the project with
  	other people.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

	Because there may be conflicts with your code and what is available in the remote,
	or there may be changes in the remote that your code isnt ready to handle yet.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	A fork is a copy of another persons repository created in your own, a clone is just a copy of a repository,
	and a branch is a different version of a repo where changes won't affect the main repo. Forks are used when
	you want your own version of someone else's repo, a clone is when you want to make changes of a repo, and
	a branch is used to create and test changes of a repo.

What is the benefit of having a copy of the last known state of the remote stored locally?

	It will allow you to continue working on your local copy offline and when you are ready to test merging 
	your local copy with the remote version, you will be able to without having internet access.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Using email to discuss potential changes. It would be much harder to propose changes to others, since
	there would not be a direct link to what you are proposing. It would be easier, in that there would be less
	risk of someone undoing someone else's work unexpectedly, since each person would have to look over another's 
	work.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each 
approach have?

	When there is a large change to the application that will affect how it works, whether that be a bug fix
	or a new feature. Creating branches allows for there to be a single working copy all of the time, whereas
	working off of master means that you are much less likely to lose track of where certain features are 
	within the commit history.